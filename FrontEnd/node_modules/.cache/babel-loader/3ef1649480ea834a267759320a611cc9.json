{"ast":null,"code":"var _jsxFileName = \"/Users/user/project_3/Rabbies_Companion_App/FrontEnd/src/containers/MapContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport Request from '../helpers/request';\nimport PinForm from \"../components/pins/PinForm\"; // import PinList from \"../components/pins/PinList\";\n// import { formatRelative } from \"date-fns\";\n// import \"@reach/combobox/styles.css\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: '100vw',\n  height: '100vh'\n}; //centers on Edinburgh by default\n\nconst center = {\n  lat: 55.9533,\n  lng: -3.1883\n};\nconst options = {\n  // styles:  \n  //custom map designs at snazzymaps - save in mapStyles.js\n  disableDefaultUI: true,\n  zoomControl: true\n};\n\nconst MapContainer = () => {\n  _s();\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_API_KEY,\n    libraries\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  const [pins, setPins] = useState([]);\n  useEffect(() => {\n    getAllData();\n  }, [pins]);\n\n  const getAllData = () => {\n    console.log(\"Loading...\");\n    const request = new Request();\n    request.get('/api/pins').then(data => {\n      setMarkers(current => [...current, {\n        //spreads in the current markers and adds in the new one\n        lat: pins.lat,\n        lng: pins.lng,\n        time: new Date()\n      }]);\n    });\n  };\n\n  const handlePost = pin => {\n    const request = new Request();\n    request.post(\"/api/pins\", pin).then(() => window.location = '/pins');\n  };\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 8,\n    center: center,\n    options: options,\n    onClick: getAllData,\n    children: [markers.map(marker => /*#__PURE__*/_jsxDEV(Marker, {\n      /* maps markers using the Marker import from the library, using time of click as key */\n      position: {\n        lat: marker.lat,\n        lng: marker.lng\n      },\n      onClick: () => {\n        setSelectedMarker(marker);\n      } // icon={{ }}\n\n    }, marker.time.toISOString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }, this)), selectedMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n      position: {\n        lat: selectedMarker.lat,\n        lng: selectedMarker.lng\n      },\n      onCloseClick: () => {\n        setSelectedMarker(null);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PinForm, {\n          onCreate: handlePost\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MapContainer, \"pDYEiM+O1/41YzC3Su0vmiS9tmE=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = MapContainer;\nexport default MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["/Users/user/project_3/Rabbies_Companion_App/FrontEnd/src/containers/MapContainer.js"],"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","Request","PinForm","libraries","mapContainerStyle","width","height","center","lat","lng","options","disableDefaultUI","zoomControl","MapContainer","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_API_KEY","markers","setMarkers","selectedMarker","setSelectedMarker","pins","setPins","getAllData","console","log","request","get","then","data","current","time","Date","handlePost","pin","post","window","location","map","marker","toISOString"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport Request from '../helpers/request';\nimport PinForm from \"../components/pins/PinForm\";\n// import PinList from \"../components/pins/PinList\";\n// import { formatRelative } from \"date-fns\";\n// import \"@reach/combobox/styles.css\"\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: '100vw',\n  height: '100vh',\n};\n\n//centers on Edinburgh by default\nconst center = {\n  lat: 55.9533,\n  lng: -3.1883\n}\n\nconst options = {\n  // styles:  \n  //custom map designs at snazzymaps - save in mapStyles.js\n  disableDefaultUI: true,\n  zoomControl: true,\n} \n\nconst MapContainer = () => {\n    const {isLoaded, loadError} = useLoadScript({\n        googleMapsApiKey: process.env.REACT_APP_API_KEY,\n        libraries,\n      });\n      const [markers, setMarkers] = React.useState([]);\n      const [selectedMarker, setSelectedMarker] = useState(null);\n      const [pins, setPins] = useState([]);\n\n      useEffect(() => {\n        getAllData();\n    }, [pins]);\n\n    const getAllData = () => {\n        \n        console.log(\"Loading...\");\n\n        const request = new Request();\n        request.get('/api/pins')\n        .then((data) => {\n          setMarkers(current => [...current, {\n            //spreads in the current markers and adds in the new one\n            lat: pins.lat, lng: pins.lng,\n            time: new Date()\n            },\n          ]);\n        })\n    }\n\n      const handlePost = (pin) => {\n        const request = new Request();\n        request.post(\"/api/pins\", pin)\n           .then(() => window.location = '/pins')\n      }\n\n      if (loadError) return \"Error loading maps\"\n      if (!isLoaded) return \"Loading...\";\n\n      return (\n        <GoogleMap \n        mapContainerStyle={mapContainerStyle} \n        zoom={8} \n        center={center}\n        options={options}\n        onClick={getAllData}\n        >\n          {markers.map((marker) => (\n          <Marker \n          key={marker.time.toISOString()}\n          /* maps markers using the Marker import from the library, using time of click as key */\n          position={{lat: marker.lat, lng: marker.lng}} \n          onClick={() => {\n            setSelectedMarker(marker);\n          }}\n          // icon={{ }}\n          \n          />))}\n\n          {selectedMarker && (\n            <InfoWindow position={{lat: selectedMarker.lat, lng: selectedMarker.lng}}\n            onCloseClick={() => {\n              setSelectedMarker(null);\n            }}\n            >\n              <div><PinForm onCreate={handlePost}/></div>\n            </InfoWindow>\n          )}\n          </GoogleMap> \n      )\n}\n\nexport default MapContainer;"]},"metadata":{},"sourceType":"module"}