{"ast":null,"code":"var _jsxFileName = \"/Users/user/project_3/Rabbies_Companion_App/FrontEnd/src/containers/MapContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\"; // import LocationMarker from \"../components/LocationMarker\"\n\nimport Request from '../helpers/request'; // import Pin from \"../components/pins/Pin\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapContainerStyle = {\n  width: '100vw',\n  height: '100vh'\n}; //centers on Edinburgh by default\n\nconst center = {\n  lat: 55.9533,\n  lng: -3.1883\n}; // const initialPins = \n\nconst options = {\n  // styles:  \n  //custom map designs at snazzymaps - save in mapStyles.js\n  disableDefaultUI: true,\n  zoomControl: true\n};\n\nconst MapContainer = ({\n  pins\n}) => {\n  _s();\n\n  const [markers, setMarkers] = pins.map((pin, index) => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"component-item\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"component\",\n        children: /*#__PURE__*/_jsxDEV(Pin, {\n          pin: pin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this);\n  });\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_API_KEY\n  }); // const [markers, setMarkers] = React.useState([]);\n\n  const [eventData, setEventData] = useState([]);\n  useEffect(() => {\n    getAllData();\n  }, []);\n\n  const getAllData = () => {\n    console.log(\"Loading...\");\n    const request = new Request();\n    request.get('/api/pins').then(data => {\n      setEventData(console.log(data));\n    });\n  };\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 8,\n    center: center,\n    options: options,\n    onClick: event => {\n      setMarkers(current => [...current, {\n        // spreads in the current markers and adds in the new one\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date()\n      }]);\n    },\n    children: markers.map(marker => /*#__PURE__*/_jsxDEV(Marker, {\n      // maps markers using the Marker import from the library, using time of click as key\n      position: {\n        lat: marker.lat,\n        lng: marker.lng\n      }\n    }, marker.time.toISOString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MapContainer, \"kYHzH3ZpMhdZ2elgQvky8W3OmbA=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = MapContainer;\nexport default MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["/Users/user/project_3/Rabbies_Companion_App/FrontEnd/src/containers/MapContainer.js"],"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","Request","mapContainerStyle","width","height","center","lat","lng","options","disableDefaultUI","zoomControl","MapContainer","pins","markers","setMarkers","map","pin","index","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_API_KEY","eventData","setEventData","getAllData","console","log","request","get","then","data","event","current","latLng","time","Date","marker","toISOString"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\n// import LocationMarker from \"../components/LocationMarker\"\nimport Request from '../helpers/request';\n// import Pin from \"../components/pins/Pin\"\n\nconst mapContainerStyle = {\n  width: '100vw',\n  height: '100vh',\n};\n\n//centers on Edinburgh by default\nconst center = {\n  lat: 55.9533,\n  lng: -3.1883\n}\n\n// const initialPins = \n\nconst options = {\n  // styles:  \n  //custom map designs at snazzymaps - save in mapStyles.js\n  disableDefaultUI: true,\n  zoomControl: true,\n} \n\nconst MapContainer = ({pins}) => {\n\n  const [markers, setMarkers] = pins.map((pin, index) => {\n    return (\n        <li key={index} className=\"component-item\">\n        <div className=\"component\">\n        <Pin pin={pin} />\n        </div>    \n        </li>\n    )\n})\n\n\n    const {isLoaded, loadError} = useLoadScript({\n        googleMapsApiKey: process.env.REACT_APP_API_KEY\n      });\n\n      // const [markers, setMarkers] = React.useState([]);\n      const [eventData, setEventData] = useState([]);\n\n      useEffect(() => {\n        getAllData();\n    }, []);\n\n    const getAllData = () => {\n        \n        console.log(\"Loading...\");\n\n        const request = new Request();\n        request.get('/api/pins')\n        .then((data) => {\n            setEventData(console.log(data));\n\n        })\n\n    }\n\n      if (loadError) return \"Error loading maps\"\n      if (!isLoaded) return \"Loading...\"\n      \n      return (\n        <GoogleMap \n        \n        mapContainerStyle={mapContainerStyle} \n        zoom={8} \n        center={center}\n        options={options}\n        onClick={(event) => {\n          \n        setMarkers(current => [...current, {\n        // spreads in the current markers and adds in the new one\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date()\n        },\n      ]);\n      }}\n        >\n          \n          {markers.map((marker) => (\n          <Marker \n          key={marker.time.toISOString()}\n          // maps markers using the Marker import from the library, using time of click as key\n          position={{lat: marker.lat, lng: marker.lng}} \n          \n          />))}\n          </GoogleMap> \n      )\n}\n\nexport default MapContainer;"]},"metadata":{},"sourceType":"module"}